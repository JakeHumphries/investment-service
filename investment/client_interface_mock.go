// Code generated by mockery v2.52.1. DO NOT EDIT.

package investment

import (
	context "context"

	models "github.com/JakeHumphries/investment-service/models"
	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateInvestment provides a mock function with given fields: ctx, investment, customerType
func (_m *MockClientInterface) CreateInvestment(ctx context.Context, investment models.Investment, customerType string) (*models.Investment, error) {
	ret := _m.Called(ctx, investment, customerType)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvestment")
	}

	var r0 *models.Investment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Investment, string) (*models.Investment, error)); ok {
		return rf(ctx, investment, customerType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Investment, string) *models.Investment); ok {
		r0 = rf(ctx, investment, customerType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Investment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Investment, string) error); ok {
		r1 = rf(ctx, investment, customerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateInvestment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInvestment'
type MockClientInterface_CreateInvestment_Call struct {
	*mock.Call
}

// CreateInvestment is a helper method to define mock.On call
//   - ctx context.Context
//   - investment models.Investment
//   - customerType string
func (_e *MockClientInterface_Expecter) CreateInvestment(ctx interface{}, investment interface{}, customerType interface{}) *MockClientInterface_CreateInvestment_Call {
	return &MockClientInterface_CreateInvestment_Call{Call: _e.mock.On("CreateInvestment", ctx, investment, customerType)}
}

func (_c *MockClientInterface_CreateInvestment_Call) Run(run func(ctx context.Context, investment models.Investment, customerType string)) *MockClientInterface_CreateInvestment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Investment), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_CreateInvestment_Call) Return(_a0 *models.Investment, _a1 error) *MockClientInterface_CreateInvestment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateInvestment_Call) RunAndReturn(run func(context.Context, models.Investment, string) (*models.Investment, error)) *MockClientInterface_CreateInvestment_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunds provides a mock function with given fields: ctx
func (_m *MockClientInterface) GetFunds(ctx context.Context) ([]models.Fund, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFunds")
	}

	var r0 []models.Fund
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Fund, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Fund); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Fund)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetFunds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunds'
type MockClientInterface_GetFunds_Call struct {
	*mock.Call
}

// GetFunds is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClientInterface_Expecter) GetFunds(ctx interface{}) *MockClientInterface_GetFunds_Call {
	return &MockClientInterface_GetFunds_Call{Call: _e.mock.On("GetFunds", ctx)}
}

func (_c *MockClientInterface_GetFunds_Call) Run(run func(ctx context.Context)) *MockClientInterface_GetFunds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClientInterface_GetFunds_Call) Return(_a0 []models.Fund, _a1 error) *MockClientInterface_GetFunds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetFunds_Call) RunAndReturn(run func(context.Context) ([]models.Fund, error)) *MockClientInterface_GetFunds_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvestments provides a mock function with given fields: ctx, customerID, encodedCursor, limit
func (_m *MockClientInterface) GetInvestments(ctx context.Context, customerID string, encodedCursor *string, limit int) ([]models.Investment, *string, error) {
	ret := _m.Called(ctx, customerID, encodedCursor, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetInvestments")
	}

	var r0 []models.Investment
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, int) ([]models.Investment, *string, error)); ok {
		return rf(ctx, customerID, encodedCursor, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, int) []models.Investment); ok {
		r0 = rf(ctx, customerID, encodedCursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Investment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *string, int) *string); ok {
		r1 = rf(ctx, customerID, encodedCursor, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *string, int) error); ok {
		r2 = rf(ctx, customerID, encodedCursor, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockClientInterface_GetInvestments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvestments'
type MockClientInterface_GetInvestments_Call struct {
	*mock.Call
}

// GetInvestments is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID string
//   - encodedCursor *string
//   - limit int
func (_e *MockClientInterface_Expecter) GetInvestments(ctx interface{}, customerID interface{}, encodedCursor interface{}, limit interface{}) *MockClientInterface_GetInvestments_Call {
	return &MockClientInterface_GetInvestments_Call{Call: _e.mock.On("GetInvestments", ctx, customerID, encodedCursor, limit)}
}

func (_c *MockClientInterface_GetInvestments_Call) Run(run func(ctx context.Context, customerID string, encodedCursor *string, limit int)) *MockClientInterface_GetInvestments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*string), args[3].(int))
	})
	return _c
}

func (_c *MockClientInterface_GetInvestments_Call) Return(_a0 []models.Investment, _a1 *string, _a2 error) *MockClientInterface_GetInvestments_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockClientInterface_GetInvestments_Call) RunAndReturn(run func(context.Context, string, *string, int) ([]models.Investment, *string, error)) *MockClientInterface_GetInvestments_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
