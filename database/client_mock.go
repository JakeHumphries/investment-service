// Code generated by mockery v2.52.1. DO NOT EDIT.

package database

import (
	context "context"

	models "github.com/JakeHumphries/investment-service/models"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CreateInvestment provides a mock function with given fields: ctx, investment
func (_m *MockClient) CreateInvestment(ctx context.Context, investment *models.Investment) (*models.Investment, error) {
	ret := _m.Called(ctx, investment)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvestment")
	}

	var r0 *models.Investment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Investment) (*models.Investment, error)); ok {
		return rf(ctx, investment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Investment) *models.Investment); ok {
		r0 = rf(ctx, investment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Investment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Investment) error); ok {
		r1 = rf(ctx, investment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_CreateInvestment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInvestment'
type MockClient_CreateInvestment_Call struct {
	*mock.Call
}

// CreateInvestment is a helper method to define mock.On call
//   - ctx context.Context
//   - investment *models.Investment
func (_e *MockClient_Expecter) CreateInvestment(ctx interface{}, investment interface{}) *MockClient_CreateInvestment_Call {
	return &MockClient_CreateInvestment_Call{Call: _e.mock.On("CreateInvestment", ctx, investment)}
}

func (_c *MockClient_CreateInvestment_Call) Run(run func(ctx context.Context, investment *models.Investment)) *MockClient_CreateInvestment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Investment))
	})
	return _c
}

func (_c *MockClient_CreateInvestment_Call) Return(_a0 *models.Investment, _a1 error) *MockClient_CreateInvestment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_CreateInvestment_Call) RunAndReturn(run func(context.Context, *models.Investment) (*models.Investment, error)) *MockClient_CreateInvestment_Call {
	_c.Call.Return(run)
	return _c
}

// GetFundByID provides a mock function with given fields: ctx, fundID
func (_m *MockClient) GetFundByID(ctx context.Context, fundID string) (*models.Fund, error) {
	ret := _m.Called(ctx, fundID)

	if len(ret) == 0 {
		panic("no return value specified for GetFundByID")
	}

	var r0 *models.Fund
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Fund, error)); ok {
		return rf(ctx, fundID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Fund); ok {
		r0 = rf(ctx, fundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Fund)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFundByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFundByID'
type MockClient_GetFundByID_Call struct {
	*mock.Call
}

// GetFundByID is a helper method to define mock.On call
//   - ctx context.Context
//   - fundID string
func (_e *MockClient_Expecter) GetFundByID(ctx interface{}, fundID interface{}) *MockClient_GetFundByID_Call {
	return &MockClient_GetFundByID_Call{Call: _e.mock.On("GetFundByID", ctx, fundID)}
}

func (_c *MockClient_GetFundByID_Call) Run(run func(ctx context.Context, fundID string)) *MockClient_GetFundByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetFundByID_Call) Return(_a0 *models.Fund, _a1 error) *MockClient_GetFundByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFundByID_Call) RunAndReturn(run func(context.Context, string) (*models.Fund, error)) *MockClient_GetFundByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunds provides a mock function with given fields: ctx
func (_m *MockClient) GetFunds(ctx context.Context) ([]models.Fund, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFunds")
	}

	var r0 []models.Fund
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Fund, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Fund); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Fund)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFunds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunds'
type MockClient_GetFunds_Call struct {
	*mock.Call
}

// GetFunds is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetFunds(ctx interface{}) *MockClient_GetFunds_Call {
	return &MockClient_GetFunds_Call{Call: _e.mock.On("GetFunds", ctx)}
}

func (_c *MockClient_GetFunds_Call) Run(run func(ctx context.Context)) *MockClient_GetFunds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetFunds_Call) Return(_a0 []models.Fund, _a1 error) *MockClient_GetFunds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFunds_Call) RunAndReturn(run func(context.Context) ([]models.Fund, error)) *MockClient_GetFunds_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvestments provides a mock function with given fields: ctx, customerID, limit, cursor
func (_m *MockClient) GetInvestments(ctx context.Context, customerID string, limit int, cursor *string) ([]models.Investment, *string, error) {
	ret := _m.Called(ctx, customerID, limit, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetInvestments")
	}

	var r0 []models.Investment
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *string) ([]models.Investment, *string, error)); ok {
		return rf(ctx, customerID, limit, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *string) []models.Investment); ok {
		r0 = rf(ctx, customerID, limit, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Investment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, *string) *string); ok {
		r1 = rf(ctx, customerID, limit, cursor)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, *string) error); ok {
		r2 = rf(ctx, customerID, limit, cursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockClient_GetInvestments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvestments'
type MockClient_GetInvestments_Call struct {
	*mock.Call
}

// GetInvestments is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID string
//   - limit int
//   - cursor *string
func (_e *MockClient_Expecter) GetInvestments(ctx interface{}, customerID interface{}, limit interface{}, cursor interface{}) *MockClient_GetInvestments_Call {
	return &MockClient_GetInvestments_Call{Call: _e.mock.On("GetInvestments", ctx, customerID, limit, cursor)}
}

func (_c *MockClient_GetInvestments_Call) Run(run func(ctx context.Context, customerID string, limit int, cursor *string)) *MockClient_GetInvestments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(*string))
	})
	return _c
}

func (_c *MockClient_GetInvestments_Call) Return(_a0 []models.Investment, _a1 *string, _a2 error) *MockClient_GetInvestments_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockClient_GetInvestments_Call) RunAndReturn(run func(context.Context, string, int, *string) ([]models.Investment, *string, error)) *MockClient_GetInvestments_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
